#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОтпускаСотрудниковПроверка();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыОтпускаСотрудников

&НаКлиенте
Процедура ОтпускаСотрудниковПриИзменении(Элемент)
	ОтпускаСотрудниковПроверка();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура АнализГрафика(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Данные", АнализГрафикаСервер());
	ОткрытьФорму("Документ.ВКМ_ГрафикОтпусков.Форма.АнализГрафика", ПараметрыФормы);
КонецПроцедуры

&НаСервере
Функция АнализГрафикаСервер()
	АдресВХранилище = ПоместитьВоВременноеХранилище(Объект.ОтпускаСотрудников.Выгрузить(), УникальныйИдентификатор);
	Возврат АдресВХранилище;	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОтпускаСотрудниковПроверка()
	Соответствие = Новый Соответствие();
	
	Для Каждого Строка Из Объект.ОтпускаСотрудников Цикл
		КоличествоДнейВСтроке = (Строка.ДатаОкончания - Строка.ДатаНачала) / 86400;
		КоличествоДнейСотрудника = Соответствие.Получить(Строка.Сотрудник);
		
		Если КоличествоДнейСотрудника <> Неопределено Тогда
			ИтогоКоличествоДней = КоличествоДнейСотрудника + КоличествоДнейВСтроке;
		Иначе 
			ИтогоКоличествоДней = КоличествоДнейВСтроке;
		КонецЕсли;
		Соответствие.Вставить(Строка.Сотрудник, ИтогоКоличествоДней);
	КонецЦикла;
	
	СписокЗначенийКрасный = Новый СписокЗначений();
	СписокЗначенийБелый = Новый СписокЗначений();
	
	Для Каждого Элемент Из Соответствие Цикл
		Если Элемент.Значение > 28 Тогда
			СписокЗначенийКрасный.Добавить(Элемент.Ключ);	
		Иначе
			СписокЗначенийБелый.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;	
	
	ОтпускаСотрудниковПриИзмененииСервер(СписокЗначенийКрасный, СписокЗначенийБелый);
КонецПроцедуры

&НаСервере
Процедура ОтпускаСотрудниковПриИзмененииСервер(СписокЗначенийКрасный, СписокЗначенийБелый)
	
	УО = УсловноеОформление.Элементы.Добавить();
	УО.Использование = Истина;
	УО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноКрасноФиолетовый);
			
	ЭлементУсловия = УО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтпускаСотрудников.Сотрудник");		
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементУсловия.ПравоеЗначение = СписокЗначенийКрасный;
	ЭлементУсловия.Использование = Истина;
				
	ОформляемоеПоле = УО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтпускаСотрудников");
	ОформляемоеПоле.Использование = Истина;
	
	
	УО = УсловноеОформление.Элементы.Добавить();
	УО.Использование = Истина;
	УО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Белый);
			
	ЭлементУсловия = УО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));		
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтпускаСотрудников.Сотрудник");		
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементУсловия.ПравоеЗначение = СписокЗначенийБелый;
	ЭлементУсловия.Использование = Истина;
				
	ОформляемоеПоле = УО.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтпускаСотрудников");
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти